package main

import (
	"context"
	"fmt"
	"github.com/spf13/viper"
	"net-http-gorilla-ddd-example/app"
	"net-http-gorilla-ddd-example/app/api"
	"net-http-gorilla-ddd-example/config"
	_ "net-http-gorilla-ddd-example/docs" // docs is generated by Swag CLI, you have to import it.
	"net-http-gorilla-ddd-example/infrastructure/repository"
	"net-http-gorilla-ddd-example/utils/log"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"
)

const (
	gracefulShutdownAwait = 5 * time.Second
)

// @title           Swagger Example API
// @version         1.0
// @description     This is a sample net-http-gorilla-ddd-example server.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.basic  BasicAuth
func main() {
	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer stop()
	var wg sync.WaitGroup

	config.Init()

	//var httpClient = &http.Client{
	//	Timeout: 30 * time.Second,
	//}
	services, err := repository.NewRepositories()
	if err != nil {
		log.Log("Fatal", "DB Error: "+err.Error())
	}
	defer services.Close()
	err = services.Automigrate()
	if err != nil {
		log.Error(err)
	}

	book := api.NewBook(ctx, services.Books)

	httpRouter := app.NewRouter(ctx)
	_ = api.NewBookRoutes(ctx, httpRouter, book)

	srv := &http.Server{
		Addr:           viper.GetString("APP_ADDR"),
		Handler:        httpRouter,
		MaxHeaderBytes: viper.GetInt("APP_MAXHEADERBYTES"),
	}
	wg.Add(2)
	go func() {
		defer wg.Done()
		if err := srv.ListenAndServe(); err != http.ErrServerClosed {
			log.Fatal(err)
		}
	}()

	fmt.Println("Server is configured and started at", srv.Addr)

	go func() {
		defer wg.Done()
		<-ctx.Done()
		log.Info("Closing HTTP Server")
		cxtTimeout, cancel := context.WithTimeout(context.TODO(), gracefulShutdownAwait)
		defer cancel()
		if err := srv.Shutdown(cxtTimeout); err != nil {
			services.Close()
			log.Error("Graceful server shutdown error: ", err)
		}
	}()
	wg.Wait()
	services.Close()
	fmt.Println("Server gracefully stopped")
}
